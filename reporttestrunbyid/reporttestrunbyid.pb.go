// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.0
// source: reporttestrunbyid.proto

package reporttestrunbyid

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request and Response messages
type ReportTestRunByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTestRunByIdRequest) Reset() {
	*x = ReportTestRunByIdRequest{}
	mi := &file_reporttestrunbyid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTestRunByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTestRunByIdRequest) ProtoMessage() {}

func (x *ReportTestRunByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTestRunByIdRequest.ProtoReflect.Descriptor instead.
func (*ReportTestRunByIdRequest) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{0}
}

func (x *ReportTestRunByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_reporttestrunbyid_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SpecRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []*Tag                 `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpecRun) Reset() {
	*x = SpecRun{}
	mi := &file_reporttestrunbyid_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecRun) ProtoMessage() {}

func (x *SpecRun) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecRun.ProtoReflect.Descriptor instead.
func (*SpecRun) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{2}
}

func (x *SpecRun) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SuiteRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpecRuns      []*SpecRun             `protobuf:"bytes,1,rep,name=specRuns,proto3" json:"specRuns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuiteRun) Reset() {
	*x = SuiteRun{}
	mi := &file_reporttestrunbyid_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuiteRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiteRun) ProtoMessage() {}

func (x *SuiteRun) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiteRun.ProtoReflect.Descriptor instead.
func (*SuiteRun) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{3}
}

func (x *SuiteRun) GetSpecRuns() []*SpecRun {
	if x != nil {
		return x.SpecRuns
	}
	return nil
}

type TestRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SuiteRuns     []*SuiteRun            `protobuf:"bytes,2,rep,name=suiteRuns,proto3" json:"suiteRuns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRun) Reset() {
	*x = TestRun{}
	mi := &file_reporttestrunbyid_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRun) ProtoMessage() {}

func (x *TestRun) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRun.ProtoReflect.Descriptor instead.
func (*TestRun) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{4}
}

func (x *TestRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestRun) GetSuiteRuns() []*SuiteRun {
	if x != nil {
		return x.SuiteRuns
	}
	return nil
}

type ReportTestRunByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportHeader  string                 `protobuf:"bytes,1,opt,name=reportHeader,proto3" json:"reportHeader,omitempty"`
	TestRun       *TestRun               `protobuf:"bytes,2,opt,name=testRun,proto3" json:"testRun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTestRunByIdResponse) Reset() {
	*x = ReportTestRunByIdResponse{}
	mi := &file_reporttestrunbyid_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTestRunByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTestRunByIdResponse) ProtoMessage() {}

func (x *ReportTestRunByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reporttestrunbyid_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTestRunByIdResponse.ProtoReflect.Descriptor instead.
func (*ReportTestRunByIdResponse) Descriptor() ([]byte, []int) {
	return file_reporttestrunbyid_proto_rawDescGZIP(), []int{5}
}

func (x *ReportTestRunByIdResponse) GetReportHeader() string {
	if x != nil {
		return x.ReportHeader
	}
	return ""
}

func (x *ReportTestRunByIdResponse) GetTestRun() *TestRun {
	if x != nil {
		return x.TestRun
	}
	return nil
}

var File_reporttestrunbyid_proto protoreflect.FileDescriptor

var file_reporttestrunbyid_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x62,
	0x79, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x07, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x75, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x52, 0x75, 0x6e, 0x73,
	0x22, 0x4a, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x19,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x32, 0x6c, 0x0a, 0x0e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x3b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x74, 0x65, 0x73, 0x74, 0x72, 0x75, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reporttestrunbyid_proto_rawDescOnce sync.Once
	file_reporttestrunbyid_proto_rawDescData = file_reporttestrunbyid_proto_rawDesc
)

func file_reporttestrunbyid_proto_rawDescGZIP() []byte {
	file_reporttestrunbyid_proto_rawDescOnce.Do(func() {
		file_reporttestrunbyid_proto_rawDescData = protoimpl.X.CompressGZIP(file_reporttestrunbyid_proto_rawDescData)
	})
	return file_reporttestrunbyid_proto_rawDescData
}

var file_reporttestrunbyid_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_reporttestrunbyid_proto_goTypes = []any{
	(*ReportTestRunByIdRequest)(nil),  // 0: testrun.ReportTestRunByIdRequest
	(*Tag)(nil),                       // 1: testrun.Tag
	(*SpecRun)(nil),                   // 2: testrun.SpecRun
	(*SuiteRun)(nil),                  // 3: testrun.SuiteRun
	(*TestRun)(nil),                   // 4: testrun.TestRun
	(*ReportTestRunByIdResponse)(nil), // 5: testrun.ReportTestRunByIdResponse
}
var file_reporttestrunbyid_proto_depIdxs = []int32{
	1, // 0: testrun.SpecRun.tags:type_name -> testrun.Tag
	2, // 1: testrun.SuiteRun.specRuns:type_name -> testrun.SpecRun
	3, // 2: testrun.TestRun.suiteRuns:type_name -> testrun.SuiteRun
	4, // 3: testrun.ReportTestRunByIdResponse.testRun:type_name -> testrun.TestRun
	0, // 4: testrun.TestRunService.ReportTestRunById:input_type -> testrun.ReportTestRunByIdRequest
	5, // 5: testrun.TestRunService.ReportTestRunById:output_type -> testrun.ReportTestRunByIdResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_reporttestrunbyid_proto_init() }
func file_reporttestrunbyid_proto_init() {
	if File_reporttestrunbyid_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reporttestrunbyid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reporttestrunbyid_proto_goTypes,
		DependencyIndexes: file_reporttestrunbyid_proto_depIdxs,
		MessageInfos:      file_reporttestrunbyid_proto_msgTypes,
	}.Build()
	File_reporttestrunbyid_proto = out.File
	file_reporttestrunbyid_proto_rawDesc = nil
	file_reporttestrunbyid_proto_goTypes = nil
	file_reporttestrunbyid_proto_depIdxs = nil
}
